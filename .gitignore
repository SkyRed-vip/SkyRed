// server.js - الخادم الأساسي لتطبيق SkyRed
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const nodemailer = require("nodemailer");
const bodyParser = require("body-parser");
const axios = require("axios");

const app = express();
app.use(express.json());
app.use(cors());
app.use(bodyParser.json());

const SECRET_KEY = "skyred_secret";

// الاتصال بقاعدة البيانات MongoDB
mongoose.connect("mongodb://localhost:27017/skyred", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// تعريف النماذج (الموظفين، المهام، الحضور، المحفظة، الموقع)
const EmployeeSchema = new mongoose.Schema({
    name: String,
    email: String,
    password: String,
    employeeId: String,
    balance: { type: Number, default: 0 },
    location: { latitude: Number, longitude: Number }
});
const Employee = mongoose.model("Employee", EmployeeSchema);

const TaskSchema = new mongoose.Schema({
    title: String,
    description: String,
    assignedTo: String,
    status: { type: String, default: "قيد التنفيذ" },
    dueDate: Date
});
const Task = mongoose.model("Task", TaskSchema);

const AttendanceSchema = new mongoose.Schema({
    employeeId: String,
    timestamp: { type: Date, default: Date.now },
    type: String // "حضور" أو "انصراف"
});
const Attendance = mongoose.model("Attendance", AttendanceSchema);

// تسجيل مستخدم جديد
app.post("/register", async (req, res) => {
    const { name, email, password, employeeId } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new Employee({ name, email, password: hashedPassword, employeeId });
    await newUser.save();
    res.send({ message: "تم إنشاء الحساب بنجاح!" });
});

// تسجيل الدخول
app.post("/login", async (req, res) => {
    const { email, password } = req.body;
    const user = await Employee.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(400).send({ message: "بيانات تسجيل الدخول غير صحيحة" });
    }
    const token = jwt.sign({ userId: user._id }, SECRET_KEY, { expiresIn: "1h" });
    res.send({ token, user });
});

// إرسال إشعار بالبريد الإلكتروني عند تسجيل الحضور المتأخر
const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: "your-email@gmail.com",
        pass: "your-password",
    },
});

app.post("/attendance/mark", async (req, res) => {
    const { employeeId, type } = req.body;
    const attendance = new Attendance({ employeeId, type });
    await attendance.save();

    if (type === "حضور متأخر") {
        const employee = await Employee.findOne({ employeeId });
        if (employee) {
            await transporter.sendMail({
                from: "your-email@gmail.com",
                to: employee.email,
                subject: "تنبيه تأخير",
                text: `لقد سجلت حضور متأخر اليوم!`,
            });
        }
    }
    res.send({ message: `تم تسجيل ${type} بنجاح!` });
});

// إرسال المهام
app.post("/tasks/create", async (req, res) => {
    const { title, description, assignedTo, dueDate } = req.body;
    const newTask = new Task({ title, description, assignedTo, dueDate });
    await newTask.save();
    res.send({ message: "تم تعيين المهمة بنجاح", task: newTask });
});

// تحديث الموقع
app.post("/location/update", async (req, res) => {
    const { employeeId, latitude, longitude } = req.body;
    await Employee.findOneAndUpdate(
        { employeeId },
        { location: { latitude, longitude } },
        { upsert: true }
    );
    res.send({ message: "تم تحديث الموقع بنجاح" });
});

// الدفع عبر المحافظ الإلكترونية (محاكاة)
app.post("/wallet/recharge", async (req, res) => {
    const { employeeId, amount, provider } = req.body;
    const employee = await Employee.findOne({ employeeId });
    if (!employee) return res.status(404).send({ message: "الموظف غير موجود" });
    employee.balance += amount;
    await employee.save();
    res.send({ message: `تمت إضافة ${amount} إلى محفظتك عبر ${provider}` });
});

// تشغيل الخادم
app.listen(5000, () => console.log("Server is running on port 5000"));
